!SESSION 2023-04-12 11:43:16.484 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\nigel.nh\eclipse-workspace\.metadata\.bak_0.log
Created Time: 2023-04-12 13:19:54.732

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:19:54.732
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:19:56.113
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				else {
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:19:56.113
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:19:56.114
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:00.081
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				else {
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:00.082
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:00.082
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:00.098
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				else {
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:00.098
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:00.099
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:01.668
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				else {
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:01.669
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:01.669
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:01.680
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				else {
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:01.680
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:01.681
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:04.220
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				{
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:04.221
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:04.221
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:05.454
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if ( ){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:05.455
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:05.455
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:11.224
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if ( isGameOver ){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:11.224
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:11.224
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:12.097
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if ( isGameOver = ){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:12.097
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:12.098
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:13.746
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if ( isGameOver ==){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:13.746
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:13.746
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:20.967
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if ( gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:20.967
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:20.967
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:23.959
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if ( gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:23.959
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:23.960
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:23.980
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if ( gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:23.980
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:23.981
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:25.859
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if  gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:25.860
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:25.860
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:28.440
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:28.442
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:28.442
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:30.966
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:30.966
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:30.967
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:209)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:30.976
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:30.976
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:30.977
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:30.985
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:30.985
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:30.985
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:30.994
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:30.994
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:30.995
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:31.004
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:31.004
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:31.004
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:263)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:257)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:105)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:360)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:346)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.queue(DecorationScheduler.java:419)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:397)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:39.434
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				(e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:39.435
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:39.435
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:40.711
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:40.712
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:40.712
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:42.675
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:42.676
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:42.676
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:43.540
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:43.540
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:43.540
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:46.517
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:46.517
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:46.518
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:47.242
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:47.242
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:47.242
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:48.906
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:48.907
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:48.907
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:50.124
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:50.125
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:50.125
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:50.815
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:50.815
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:50.816
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:52.476
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:52.477
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:52.477
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:52.484
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if(e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:52.484
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:52.485
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:53.052
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:53.052
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:53.053
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:55.786
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				i(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:55.786
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:55.787
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:55.795
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:55.796
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:55.796
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:55.797
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if(e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:55.798
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:55.798
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:56.434
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:56.435
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:56.436
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:58.251
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:58.252
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:58.252
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:58.259
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if(e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:20:58.260
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:20:58.260
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:20:58.826
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:20:58.827
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:20:58.827
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:21:00.497
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:21:00.497
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:21:00.497
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:21:00.504
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if(e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-04-12 13:21:00.505
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-04-12 13:21:00.505
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-04-12 13:21:01.293
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
import java.util.ArrayList;
import java.util.Random;

import javafx.application.Application;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.scene.text.Text;
import javafx.stage.Stage;

public class GameBoard extends Application {
	public static final double WIDTH = 820;
	public static final double HEIGHT = 600;
	public static final int ROWS = 30;
	public static final int COLS = 41;
	public static final double SIZEWIDTH = WIDTH / COLS;
	public static final double SIZEHEIGHT = HEIGHT / ROWS;

	public ArrayList<GameObject> listRobots;
	public int numRobots = 12;
	public IntegerProperty numScores = new SimpleIntegerProperty(0);
	public Pane gamePlay;
	public boolean gameOver = false;
	public Text score;

	public void start(Stage primaryStage) throws Exception {
		try {
			Random rand = new Random();

			BorderPane mainPane1 = new BorderPane();
			BorderPane mainPane2 = new BorderPane();
			gamePlay = new Pane();
			VBox scoreBoard = new VBox();
			HBox functionBoard = new HBox();

			Text scoreText = new Text("Scores");
			score = new Text("");
			score.textProperty().bind(numScores.asString());

			scoreBoard.getChildren().addAll(scoreText, score);
			scoreBoard.setAlignment(Pos.CENTER);
			mainPane1.setTop(scoreBoard);

			mainPane1.setBottom(functionBoard);

			mainPane1.setCenter(gamePlay);

			Scene scene1 = new Scene(mainPane1, WIDTH, HEIGHT + 55);
			Scene scene2 = new Scene(mainPane2, WIDTH, HEIGHT + 55);

			// rectangle location
			double x = 0;
			double y = 0;

			// decide with color to use
			int j = 0;
			ArrayList<Color> listColor = new ArrayList<Color>(2);
			listColor.add(Color.BEIGE);
			listColor.add(Color.CADETBLUE);

			// draw game board
			for (int r = 0; r < ROWS; r++) {
				for (int c = 0; c < COLS; c++) {
					Rectangle rectangle = new Rectangle(x, y, SIZEWIDTH, SIZEHEIGHT);
					rectangle.setFill(listColor.get(j));
					rectangle.setStroke(Color.BLACK);
					gamePlay.getChildren().addAll(rectangle);

					if (j == 0) {
						j++;
					}
					else {
						j--;
					}

					x += SIZEWIDTH;
				}
				x = 0;
				y += SIZEHEIGHT;
			}

			// add player
			listRobots = new ArrayList<GameObject>();

			Player player = new Player(SIZEWIDTH * COLS / 2, SIZEHEIGHT * ROWS / 2 + SIZEHEIGHT / 2);
			gamePlay.getChildren().add(player);

			// add robots
			for (int i = 0; i < numRobots; i++) {
				Robot robot = new Robot(rand.nextInt(COLS) * SIZEWIDTH + SIZEWIDTH / 2,
						rand.nextInt(ROWS) * SIZEHEIGHT + SIZEHEIGHT / 2);
				listRobots.add(robot);
			}
			gamePlay.getChildren().addAll(listRobots);

			// add teleport button
			Button teleport = new Button("Teleport");
			teleport.setOnAction(e -> {
				player.teleportTo(ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});

			// add safe teleport
			Button safeTeleport = new Button("Safe Teleport");
			safeTeleport.setOnAction(e -> {
				player.safeTeleport(listRobots, ROWS, COLS);
				robotsFollow(listRobots, player);
				checkCollision(listRobots);
			});
			functionBoard.getChildren().addAll(teleport, safeTeleport);

			teleport.setMaxWidth(Double.MAX_VALUE);
			safeTeleport.setMaxWidth(Double.MAX_VALUE);
			HBox.setHgrow(teleport, Priority.ALWAYS);
			HBox.setHgrow(safeTeleport, Priority.ALWAYS);

			scene1.setOnKeyPressed(e -> {
				if (e.getCode() == KeyCode.D && player.getX() + SIZEWIDTH < WIDTH && gameOver == false) {
					player.moveTo(0, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.A && player.getX() - SIZEWIDTH > 0 && gameOver == false) {
					player.moveTo(0, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.W && player.getY() - SIZEHEIGHT > 0 && gameOver == false) {
					player.moveTo(-1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.S && player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Q && player.getX() - SIZEWIDTH > 0 && player.getY() - SIZEHEIGHT > 0
						&& gameOver == false) {
					player.moveTo(-1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.E && player.getY() - SIZEHEIGHT > 0 && player.getX() + SIZEWIDTH < WIDTH
						&& gameOver == false) {
					player.moveTo(-1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.Z && player.getX() - SIZEWIDTH > 0
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, -1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (e.getCode() == KeyCode.C && player.getX() + SIZEWIDTH < WIDTH
						&& player.getY() + SIZEHEIGHT < HEIGHT && gameOver == false) {
					player.moveTo(1, 1);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				(e.getCode() == KeyCode.X && gameOver == false) {
					player.moveTo(0, 0);
					robotsFollow(listRobots, player);
					checkCollision(listRobots);
					if (isGameOver(listRobots, player) == true) {
						gameOver = true;
						player.stopMoving(player.getX(), player.getY());
					}
				}
				if (gameOver == true){
					primaryStage.setScene(scene2);
					score = new Text("");
					VBox setting = new VBox();
					Text textScore = new Text("Scores");
					Button replay = new Button("Try Again");
					setting.getChildren().addAll(textScore, score, replay);
					score.textProperty().bind(numScores.asString());
					setting.setAlignment(Pos.CENTER);

					replay.setOnAction(r -> {
						gameOver = false;
						player.safeTeleport(listRobots, ROWS, COLS);
						primaryStage.setScene(scene1);
					});
					mainPane2.setCenter(setting);
				}
			});

			primaryStage.setTitle("Game Play");
			primaryStage.setScene(scene1);
//			primaryStage.setResizable(false);
			primaryStage.show();
		}
		catch (Exception e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		launch(args);
	}

	// all robots move
	void robotsFollow(ArrayList<GameObject> list, Player player) {
		for (int i = 0; i < list.size(); i++) {
			if (list.get(i) instanceof Robot) {
				if (list.get(i).getX() < player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 1);
				}
				else if (list.get(i).getX() < player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, -1);
				}
				else if (list.get(i).getX() > player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, -1);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() < player.getY()) {
					list.get(i).moveTo(1, 0);
				}
				else if (list.get(i).getX() == player.getX() && list.get(i).getY() > player.getY()) {
					list.get(i).moveTo(-1, 0);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() < player.getX()) {
					list.get(i).moveTo(0, 1);
				}
				else if (list.get(i).getY() == player.getY() && list.get(i).getX() > player.getX()) {
					list.get(i).moveTo(0, -1);
				}
			}
		}
	}

	void checkCollision(ArrayList<GameObject> listRobots) {
		for (int i = 0; i < listRobots.size(); i++) {
			for (int j = i + 1; j < listRobots.size(); j++) {
				if (listRobots.get(i).getX() == listRobots.get(j).getX()
						&& listRobots.get(i).getY() == listRobots.get(j).getY()) {
					Rubble rubble = new Rubble(listRobots.get(i).getX(), listRobots.get(i).getY());
					listRobots.remove(j);
					listRobots.set(i, rubble);
					numScores.set(numScores.get() + 10);
					gamePlay.getChildren().add(rubble);
				}
			}
		}
	}

	boolean isGameOver(ArrayList<GameObject> listRobots, Player player) {
		for (int i = 0; i < listRobots.size(); i++) {
			if (player.getX() == listRobots.get(i).getX() && player.getY() == listRobots.get(i).getY()) {
				return true;
			}
		}

		return false;
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-12 13:21:01.294
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-04-12 13:21:01.294
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2585)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2068)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2502)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2059)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3307)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3084)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
!SESSION 2023-04-12 22:22:09.795 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 22:22:13.199
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 22:22:16.762
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-12 22:22:25.552
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 22:22:25.552
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 22:22:25.552
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-12 22:22:32.104
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-12 23:28:23.321 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:28:24.919
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:28:26.421
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-12 23:28:29.526
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:28:29.526
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:28:29.526
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-12 23:28:35.274
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-12 23:36:56.832 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:36:58.686
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:37:00.034
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-12 23:37:03.087
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:37:03.087
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:37:03.087
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-12 23:37:09.081
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-12 23:43:34.208 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:43:35.857
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:43:37.458
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-12 23:43:40.284
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:43:40.284
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:43:40.284
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-12 23:43:46.147
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-12 23:50:10.275 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:50:11.981
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:50:13.472
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-12 23:50:16.425
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:50:16.425
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:50:16.425
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-12 23:50:22.132
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-12 23:51:27.270 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:51:29.052
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:51:30.431
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-12 23:51:33.509
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:51:33.510
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:51:33.510
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-12 23:51:39.174
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-12 23:55:49.243 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:55:50.963
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-12 23:55:52.582
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-12 23:55:55.375
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:55:55.375
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-12 23:55:55.375
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-12 23:56:00.871
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-13 00:04:01.464 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-13 00:04:03.103
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-13 00:04:04.665
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-13 00:04:07.617
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-13 00:04:07.617
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-13 00:04:07.617
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-13 00:04:13.639
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-13 13:03:53.147 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-13 13:03:55.127
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-13 13:03:57.977
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-13 13:04:02.999
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-13 13:04:02.999
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-13 13:04:02.999
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-13 13:04:07.374
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.core 4 4 2023-04-13 14:09:55.814
!MESSAGE Could not retrieve declared fields
!STACK 0
org.eclipse.core.runtime.OperationCanceledException
	at org.eclipse.jdt.internal.core.AbstractClassFile.getClassFileContent(AbstractClassFile.java:237)
	at org.eclipse.jdt.internal.core.ClassFile.getJarBinaryTypeInfo(ClassFile.java:240)
	at org.eclipse.jdt.internal.core.ClassFile.getBinaryTypeInfo(ClassFile.java:201)
	at org.eclipse.jdt.internal.core.ClassFile.buildStructure(ClassFile.java:92)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.SourceRefElement.generateInfos(SourceRefElement.java:113)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.BinaryType.getElementInfo(BinaryType.java:288)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:314)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.createAnswer(SearchableEnvironment.java:235)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:186)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:515)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.lambda$0(LookupEnvironment.java:240)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForTypeFromModules(LookupEnvironment.java:384)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:239)
	at org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:116)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:249)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveTypeFor(BinaryTypeBinding.java:1893)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.availableFields(BinaryTypeBinding.java:373)
	at org.eclipse.jdt.core.dom.TypeBinding.getDeclaredFields(TypeBinding.java:249)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.hasMethodWithName(UnresolvedElementsSubProcessor.java:578)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.addSimilarVariableProposals(UnresolvedElementsSubProcessor.java:528)
	at org.eclipse.jdt.internal.ui.text.correction.UnresolvedElementsSubProcessor.getVariableProposals(UnresolvedElementsSubProcessor.java:315)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:406)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
!SESSION 2023-04-13 19:46:13.007 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-13 19:46:17.569
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-13 19:46:22.681
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-13 19:46:37.085
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-13 19:46:37.085
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-13 19:46:37.085
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-13 19:46:47.026
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-14 14:28:16.399 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-14 14:28:18.250
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-14 14:28:20.898
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-14 14:28:25.735
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-14 14:28:25.735
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-14 14:28:25.736
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-14 14:28:29.614
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-14 14:49:15.241
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.core.dom.Type.accept(org.eclipse.jdt.core.dom.ASTVisitor)" because "type" is null
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.getQualifiedTypeName(ASTNodes.java:1173)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.findReference(CreateObjectReferenceProposal.java:150)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.hasProposal(CreateObjectReferenceProposal.java:84)
	at org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.addObjectReferenceProposal(LocalCorrectionsSubProcessor.java:870)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:494)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectProposals(JavaCorrectionProcessor.java:284)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getMarkerAnnotationFixes(ProblemHover.java:154)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:95)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-14 14:49:43.122
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.core.dom.Type.accept(org.eclipse.jdt.core.dom.ASTVisitor)" because "type" is null
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.getQualifiedTypeName(ASTNodes.java:1173)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.findReference(CreateObjectReferenceProposal.java:150)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.hasProposal(CreateObjectReferenceProposal.java:84)
	at org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.addObjectReferenceProposal(LocalCorrectionsSubProcessor.java:870)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:494)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectProposals(JavaCorrectionProcessor.java:284)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getMarkerAnnotationFixes(ProblemHover.java:154)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:95)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-14 14:57:58.564
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.core.dom.Type.accept(org.eclipse.jdt.core.dom.ASTVisitor)" because "type" is null
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.getQualifiedTypeName(ASTNodes.java:1173)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.findReference(CreateObjectReferenceProposal.java:150)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.hasProposal(CreateObjectReferenceProposal.java:84)
	at org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.addObjectReferenceProposal(LocalCorrectionsSubProcessor.java:870)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:494)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-14 15:49:55.020
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.core.dom.Type.accept(org.eclipse.jdt.core.dom.ASTVisitor)" because "type" is null
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.getQualifiedTypeName(ASTNodes.java:1173)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.findReference(CreateObjectReferenceProposal.java:150)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.hasProposal(CreateObjectReferenceProposal.java:84)
	at org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.addObjectReferenceProposal(LocalCorrectionsSubProcessor.java:870)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:494)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-14 15:51:31.281
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.core.dom.Type.accept(org.eclipse.jdt.core.dom.ASTVisitor)" because "type" is null
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.getQualifiedTypeName(ASTNodes.java:1173)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.findReference(CreateObjectReferenceProposal.java:150)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.hasProposal(CreateObjectReferenceProposal.java:84)
	at org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.addObjectReferenceProposal(LocalCorrectionsSubProcessor.java:870)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:494)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-14 15:51:39.108
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.core.dom.Type.accept(org.eclipse.jdt.core.dom.ASTVisitor)" because "type" is null
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.getQualifiedTypeName(ASTNodes.java:1173)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.findReference(CreateObjectReferenceProposal.java:150)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.hasProposal(CreateObjectReferenceProposal.java:84)
	at org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.addObjectReferenceProposal(LocalCorrectionsSubProcessor.java:870)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:494)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-14 15:51:45.097
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.core.dom.Type.accept(org.eclipse.jdt.core.dom.ASTVisitor)" because "type" is null
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.getQualifiedTypeName(ASTNodes.java:1173)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.findReference(CreateObjectReferenceProposal.java:150)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.hasProposal(CreateObjectReferenceProposal.java:84)
	at org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.addObjectReferenceProposal(LocalCorrectionsSubProcessor.java:870)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:494)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-14 15:51:54.709
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.core.dom.Type.accept(org.eclipse.jdt.core.dom.ASTVisitor)" because "type" is null
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.getQualifiedTypeName(ASTNodes.java:1173)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.findReference(CreateObjectReferenceProposal.java:150)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.hasProposal(CreateObjectReferenceProposal.java:84)
	at org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.addObjectReferenceProposal(LocalCorrectionsSubProcessor.java:870)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:494)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.ui 4 2 2023-04-14 15:54:58.235
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.jdt.core.dom.Type.accept(org.eclipse.jdt.core.dom.ASTVisitor)" because "type" is null
	at org.eclipse.jdt.internal.corext.dom.ASTNodes.getQualifiedTypeName(ASTNodes.java:1173)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.findReference(CreateObjectReferenceProposal.java:150)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.CreateObjectReferenceProposal.hasProposal(CreateObjectReferenceProposal.java:84)
	at org.eclipse.jdt.internal.ui.text.correction.LocalCorrectionsSubProcessor.addObjectReferenceProposal(LocalCorrectionsSubProcessor.java:870)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.process(QuickFixProcessor.java:494)
	at org.eclipse.jdt.internal.ui.text.correction.QuickFixProcessor.getCorrections(QuickFixProcessor.java:361)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionCollector.safeRun(JavaCorrectionProcessor.java:381)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.run(JavaCorrectionProcessor.java:341)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor$SafeCorrectionProcessorAccess.process(JavaCorrectionProcessor.java:336)
	at org.eclipse.jdt.internal.ui.text.correction.JavaCorrectionProcessor.collectCorrections(JavaCorrectionProcessor.java:465)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:115)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.computeCompletionProposals(ProblemHover.java:89)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.<init>(ProblemHover.java:74)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover.createAnnotationInfo(ProblemHover.java:178)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover.getHoverInfo2(AbstractAnnotationHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
!SESSION 2023-04-14 20:28:20.998 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-14 20:28:22.751
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-14 20:28:24.479
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-14 20:28:27.908
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-14 20:28:27.908
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-14 20:28:27.908
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-14 20:28:33.115
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-14 22:21:26.644 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-14 22:21:29.322
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-14 22:21:31.348
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-14 22:21:35.427
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-14 22:21:35.428
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-14 22:21:35.428
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-14 22:21:42.757
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-15 11:37:53.218 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-15 11:37:55.575
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-15 11:37:57.728
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-15 11:38:01.102
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-15 11:38:01.102
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-15 11:38:01.102
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-15 11:38:08.258
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-15 13:16:18.450 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-15 13:16:20.839
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-15 13:16:25.511
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-15 13:16:34.283
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-15 13:16:34.283
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-15 13:16:34.283
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-15 13:16:39.127
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-15 15:00:30.087 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-15 15:00:30.777
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-15 15:00:31.532
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-15 15:00:32.780
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-15 15:00:32.781
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-15 15:00:32.781
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-15 15:00:35.778
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-18 10:39:11.381 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-18 10:39:16.078
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-18 10:39:23.972
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-18 10:39:40.743
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-18 10:39:40.743
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-18 10:39:40.743
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-18 10:39:53.788
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-18 11:12:55.094 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-18 11:12:56.875
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-18 11:12:58.545
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-18 11:13:01.664
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-18 11:13:01.665
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-18 11:13:01.665
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-18 11:13:07.538
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-21 14:03:53.747 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 14:03:57.055
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 14:04:01.887
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-21 14:04:11.307
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 14:04:11.307
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 14:04:11.307
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-21 14:04:18.294
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.jdt.ui 4 10001 2023-04-21 14:20:23.091
!MESSAGE Internal Error
!STACK 0
org.eclipse.jface.text.BadLocationException
	at org.eclipse.jface.text.AbstractDocument.getChar(AbstractDocument.java:783)
	at org.eclipse.core.internal.filebuffers.SynchronizableDocument.getChar(SynchronizableDocument.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaSourceHover.getBracketHoverInfo(JavaSourceHover.java:190)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaSourceHover.getHoverInfo(JavaSourceHover.java:147)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaSourceHover.getHoverInfo2(JavaSourceHover.java:127)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)
!SESSION 2023-04-21 15:55:20.053 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 15:55:21.766
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 15:55:23.784
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-21 15:55:28.526
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 15:55:28.526
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 15:55:28.526
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-21 15:55:32.382
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.debug.ui 4 120 2023-04-21 15:58:59.440
!MESSAGE Error logged from Debug UI: 
!STACK 0
java.io.IOException: Output Stream is closed
	at org.eclipse.ui.console.IOConsoleOutputStream.encodedWrite(IOConsoleOutputStream.java:265)
	at org.eclipse.ui.console.IOConsoleOutputStream.write(IOConsoleOutputStream.java:260)
	at org.eclipse.debug.internal.ui.views.console.ProcessConsole$StreamListener.streamAppended(ProcessConsole.java:809)
	at org.eclipse.debug.internal.core.OutputStreamMonitor$1.run(OutputStreamMonitor.java:171)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.debug.internal.core.OutputStreamMonitor.fireStreamAppended(OutputStreamMonitor.java:168)
	at org.eclipse.debug.internal.core.OutputStreamMonitor.internalRead(OutputStreamMonitor.java:256)
	at org.eclipse.debug.internal.core.OutputStreamMonitor.read(OutputStreamMonitor.java:225)
	at java.base/java.lang.Thread.run(Thread.java:833)
!SESSION 2023-04-21 15:59:00.667 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 15:59:01.379
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 15:59:02.132
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-21 15:59:03.560
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 15:59:03.560
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 15:59:03.560
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-21 15:59:06.507
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.debug.ui 4 120 2023-04-21 16:00:12.785
!MESSAGE Error logged from Debug UI: 
!STACK 0
java.io.IOException: Output Stream is closed
	at org.eclipse.ui.console.IOConsoleOutputStream.encodedWrite(IOConsoleOutputStream.java:265)
	at org.eclipse.ui.console.IOConsoleOutputStream.write(IOConsoleOutputStream.java:260)
	at org.eclipse.debug.internal.ui.views.console.ProcessConsole$StreamListener.streamAppended(ProcessConsole.java:809)
	at org.eclipse.debug.internal.core.OutputStreamMonitor$1.run(OutputStreamMonitor.java:171)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.debug.internal.core.OutputStreamMonitor.fireStreamAppended(OutputStreamMonitor.java:168)
	at org.eclipse.debug.internal.core.OutputStreamMonitor.internalRead(OutputStreamMonitor.java:256)
	at org.eclipse.debug.internal.core.OutputStreamMonitor.read(OutputStreamMonitor.java:225)
	at java.base/java.lang.Thread.run(Thread.java:833)
!SESSION 2023-04-21 16:00:15.099 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 16:00:15.828
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 16:00:16.565
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-21 16:00:18.050
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 16:00:18.050
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 16:00:18.050
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-21 16:00:20.990
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.debug.ui 4 120 2023-04-21 16:07:22.459
!MESSAGE Error logged from Debug UI: 
!STACK 0
java.io.IOException: Output Stream is closed
	at org.eclipse.ui.console.IOConsoleOutputStream.encodedWrite(IOConsoleOutputStream.java:265)
	at org.eclipse.ui.console.IOConsoleOutputStream.write(IOConsoleOutputStream.java:260)
	at org.eclipse.debug.internal.ui.views.console.ProcessConsole$StreamListener.streamAppended(ProcessConsole.java:809)
	at org.eclipse.debug.internal.core.OutputStreamMonitor$1.run(OutputStreamMonitor.java:171)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.debug.internal.core.OutputStreamMonitor.fireStreamAppended(OutputStreamMonitor.java:168)
	at org.eclipse.debug.internal.core.OutputStreamMonitor.internalRead(OutputStreamMonitor.java:256)
	at org.eclipse.debug.internal.core.OutputStreamMonitor.read(OutputStreamMonitor.java:225)
	at java.base/java.lang.Thread.run(Thread.java:833)
!SESSION 2023-04-21 16:07:23.506 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 16:07:24.223
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 16:07:24.914
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-21 16:07:26.363
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 16:07:26.363
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 16:07:26.363
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-21 16:07:29.416
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-21 17:17:06.397 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 17:17:07.108
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-21 17:17:07.866
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-21 17:17:09.397
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 17:17:09.397
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-21 17:17:09.397
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-21 17:17:12.375
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-22 10:33:17.127 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-22 10:33:20.031
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-22 10:33:25.121
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-22 10:33:35.268
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 10:33:35.268
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 10:33:35.268
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-22 10:33:40.630
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui 4 0 2023-04-22 11:39:31.177
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException: Cannot read field "type" because "argument.binding" is null
	at org.eclipse.jdt.internal.codeassist.SelectionEngine$1Visitor.visit(SelectionEngine.java:1532)
	at org.eclipse.jdt.internal.compiler.ast.Argument.traverse(Argument.java:268)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse(TryStatement.java:1257)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1164)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:437)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.selectLocalDeclaration(SelectionEngine.java:1559)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:1088)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:167)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:389)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:382)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:124)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 4 0 2023-04-22 11:39:31.183
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException: Cannot read field "type" because "argument.binding" is null
	at org.eclipse.jdt.internal.codeassist.SelectionEngine$1Visitor.visit(SelectionEngine.java:1532)
	at org.eclipse.jdt.internal.compiler.ast.Argument.traverse(Argument.java:268)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse(TryStatement.java:1257)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1164)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:437)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.selectLocalDeclaration(SelectionEngine.java:1559)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:1088)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:167)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:389)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:382)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:124)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 4 0 2023-04-22 11:39:31.190
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException: Cannot read field "type" because "argument.binding" is null
	at org.eclipse.jdt.internal.codeassist.SelectionEngine$1Visitor.visit(SelectionEngine.java:1532)
	at org.eclipse.jdt.internal.compiler.ast.Argument.traverse(Argument.java:268)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse(TryStatement.java:1257)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1164)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:437)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.selectLocalDeclaration(SelectionEngine.java:1559)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:1088)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:167)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:389)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:382)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:124)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 4 0 2023-04-22 11:39:31.198
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException: Cannot read field "type" because "argument.binding" is null
	at org.eclipse.jdt.internal.codeassist.SelectionEngine$1Visitor.visit(SelectionEngine.java:1532)
	at org.eclipse.jdt.internal.compiler.ast.Argument.traverse(Argument.java:268)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse(TryStatement.java:1257)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1164)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:437)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.selectLocalDeclaration(SelectionEngine.java:1559)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:1088)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:167)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:389)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:382)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:124)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 4 0 2023-04-22 11:39:31.206
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException: Cannot read field "type" because "argument.binding" is null
	at org.eclipse.jdt.internal.codeassist.SelectionEngine$1Visitor.visit(SelectionEngine.java:1532)
	at org.eclipse.jdt.internal.compiler.ast.Argument.traverse(Argument.java:268)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse(TryStatement.java:1257)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1164)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:437)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.selectLocalDeclaration(SelectionEngine.java:1559)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:1088)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:167)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:389)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:382)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:124)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 4 0 2023-04-22 11:39:31.213
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException: Cannot read field "type" because "argument.binding" is null
	at org.eclipse.jdt.internal.codeassist.SelectionEngine$1Visitor.visit(SelectionEngine.java:1532)
	at org.eclipse.jdt.internal.compiler.ast.Argument.traverse(Argument.java:268)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse(TryStatement.java:1257)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1164)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:437)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.selectLocalDeclaration(SelectionEngine.java:1559)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:1088)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:167)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:389)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:382)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:124)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 4 0 2023-04-22 11:39:31.222
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException: Cannot read field "type" because "argument.binding" is null
	at org.eclipse.jdt.internal.codeassist.SelectionEngine$1Visitor.visit(SelectionEngine.java:1532)
	at org.eclipse.jdt.internal.compiler.ast.Argument.traverse(Argument.java:268)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse(TryStatement.java:1257)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1164)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:437)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.selectLocalDeclaration(SelectionEngine.java:1559)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:1088)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:167)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:389)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:382)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:124)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 4 0 2023-04-22 11:39:31.230
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException: Cannot read field "type" because "argument.binding" is null
	at org.eclipse.jdt.internal.codeassist.SelectionEngine$1Visitor.visit(SelectionEngine.java:1532)
	at org.eclipse.jdt.internal.compiler.ast.Argument.traverse(Argument.java:268)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse(TryStatement.java:1257)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1164)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:437)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.selectLocalDeclaration(SelectionEngine.java:1559)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:1088)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:167)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:389)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:382)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:124)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.ui 4 0 2023-04-22 11:39:31.245
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.NullPointerException: Cannot read field "type" because "argument.binding" is null
	at org.eclipse.jdt.internal.codeassist.SelectionEngine$1Visitor.visit(SelectionEngine.java:1532)
	at org.eclipse.jdt.internal.compiler.ast.Argument.traverse(Argument.java:268)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.traverse(TryStatement.java:1257)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1164)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:154)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:795)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1173)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:437)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.selectLocalDeclaration(SelectionEngine.java:1559)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.select(SelectionEngine.java:1088)
	at org.eclipse.jdt.internal.core.Openable.codeSelect(Openable.java:167)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:389)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:382)
	at org.eclipse.jdt.internal.ui.javaeditor.JavaElementHyperlinkDetector.detectHyperlinks(JavaElementHyperlinkDetector.java:124)
	at org.eclipse.ui.texteditor.HyperlinkDetectorRegistry$HyperlinkDetectorDelegate.detectHyperlinks(HyperlinkDetectorRegistry.java:81)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:289)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.findHyperlinks(HyperlinkManager.java:262)
	at org.eclipse.jface.text.hyperlink.HyperlinkManager.mouseMove(HyperlinkManager.java:457)
	at org.eclipse.swt.widgets.TypedListener.handleEvent(TypedListener.java:216)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4256)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1066)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4054)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3642)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)
!SESSION 2023-04-22 16:27:21.569 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-22 16:27:23.244
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-22 16:27:25.113
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-22 16:27:29.315
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 16:27:29.315
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 16:27:29.315
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-22 16:27:33.459
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-22 16:47:59.514 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-22 16:48:00.258
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.

!ENTRY ch.qos.logback.classic 1 0 2023-04-22 16:48:01.081
!MESSAGE Logback config file: C:\Users\nigel.nh\eclipse-workspace\.metadata\.plugins\org.eclipse.m2e.logback\logback.2.1.0.20221015-0744.xml

!ENTRY org.eclipse.jface 2 0 2023-04-22 16:48:02.472
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 16:48:02.472
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.navigate.open.type"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.lsp4e.symbolinworkspace"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
!SUBENTRY 1 org.eclipse.jface 2 0 2023-04-22 16:48:02.472
!MESSAGE A conflict occurred for ALT+SHIFT+R:
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.edit.text.java.rename.element,Rename - Refactoring ,
		Rename the selected element,
		Category(org.eclipse.jdt.ui.category.refactoring,Refactor - Java,Java Refactoring Actions,true),
		WorkbenchHandlerServiceHandler("org.eclipse.jdt.ui.edit.text.java.rename.element"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(ALT+SHIFT+R,
	ParameterizedCommand(Command(org.eclipse.ui.edit.rename,Rename,
		Rename the selected item,
		Category(org.eclipse.ui.category.file,File,null,true),
		WorkbenchHandlerServiceHandler("org.eclipse.ui.edit.rename"),
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.egit.ui 2 0 2023-04-22 16:48:05.570
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\nigel.nh'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.
!SESSION 2023-04-25 10:27:56.791 -----------------------------------------------
eclipse.buildId=4.26.0.20221201-1200
java.version=17.0.6
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

!ENTRY ch.qos.logback.classic 1 0 2023-04-25 10:27:59.523
!MESSAGE Activated before the state location was initialized. Retry after the state location is initialized.
